/* 
 * API Inserimento Ordine
 *
 * Documentazione delle API per l'inserimento di un ordine.   **Tutti i parametri che non hanno un `required` affianco sono opzionali.** In più, durante la prova togliere la spunta da \"Send empty value\".  Così, il parametro non viene passato; se non viene tolto, allora il parametro viene passato come stringa vuota.   
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InserisciTestataBody
    /// </summary>
    [DataContract]
        public partial class InserisciTestataBody :  IEquatable<InserisciTestataBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InserisciTestataBody" /> class.
        /// </summary>
        /// <param name="cliCodice">Codice del cliente (required) (default to &quot;&quot;).</param>
        /// <param name="tmaCodice">Codice del magazzino (default to &quot;&quot;).</param>
        /// <param name="tdoCodice">Codice del tipo documento ordine (default to &quot;&quot;).</param>
        /// <param name="indCodice">Codice dell&#x27;indirizzo (default to &quot;&quot;).</param>
        /// <param name="numeroDocumento">Numero del documento (default to &quot;&quot;).</param>
        /// <param name="dataDocumento">Data del documento (default to &quot;&quot;).</param>
        /// <param name="dataConsegna">Data di consegna. \&quot;dd-mm-yyyy\&quot; Deve essere uguale o successiva alla data del documento. Se la data di consegna è precedente alla data del documento, verrà generato un errore.  (default to &quot;&quot;).</param>
        /// <param name="descrizione1">Descrizione 1 (default to &quot;&quot;).</param>
        /// <param name="descrizione2">Descrizione 2 (default to &quot;&quot;).</param>
        /// <param name="via">Via (default to &quot;&quot;).</param>
        /// <param name="cap">Cap (default to &quot;&quot;).</param>
        /// <param name="citta">Città (default to &quot;&quot;).</param>
        /// <param name="provincia">Provincia (default to &quot;&quot;).</param>
        /// <param name="tvaCodice">Codice valuta (default to &quot;&quot;).</param>
        /// <param name="tpaCodice">Codice del pagamento (default to &quot;&quot;).</param>
        /// <param name="tlvCodice">Codice del listino (default to &quot;&quot;).</param>
        /// <param name="tsmCodice">Codice sconto (default to &quot;&quot;).</param>
        /// <param name="tsmCodiceArt">Codice sconto articolo (default to &quot;&quot;).</param>
        /// <param name="tagCodice">Codice dell&#x27;agente (default to &quot;&quot;).</param>
        /// <param name="codiceContratto">Codice del contratto (default to &quot;&quot;).</param>
        /// <param name="note">Note (default to &quot;&quot;).</param>
        public InserisciTestataBody(string cliCodice = "", string tmaCodice = "", string tdoCodice = "", string indCodice = "", string numeroDocumento = "", string dataDocumento = "", string dataConsegna = "", string descrizione1 = "", string descrizione2 = "", string via = "", string cap = "", string citta = "", string provincia = "", string tvaCodice = "", string tpaCodice = "", string tlvCodice = "", string tsmCodice = "", string tsmCodiceArt = "", string tagCodice = "", string codiceContratto = "", string note = "")
        {
            // to ensure "cliCodice" is required (not null)
            if (cliCodice == null)
            {
                throw new InvalidDataException("cliCodice is a required property for InserisciTestataBody and cannot be null");
            }
            else
            {
                this.CliCodice = cliCodice;
            }
            // use default value if no "tmaCodice" provided
            if (tmaCodice == null)
            {
                this.TmaCodice = "";
            }
            else
            {
                this.TmaCodice = tmaCodice;
            }
            // use default value if no "tdoCodice" provided
            if (tdoCodice == null)
            {
                this.TdoCodice = "";
            }
            else
            {
                this.TdoCodice = tdoCodice;
            }
            // use default value if no "indCodice" provided
            if (indCodice == null)
            {
                this.IndCodice = "";
            }
            else
            {
                this.IndCodice = indCodice;
            }
            // use default value if no "numeroDocumento" provided
            if (numeroDocumento == null)
            {
                this.NumeroDocumento = "";
            }
            else
            {
                this.NumeroDocumento = numeroDocumento;
            }
            // use default value if no "dataDocumento" provided
            if (dataDocumento == null)
            {
                this.DataDocumento = "";
            }
            else
            {
                this.DataDocumento = dataDocumento;
            }
            // use default value if no "dataConsegna" provided
            if (dataConsegna == null)
            {
                this.DataConsegna = "";
            }
            else
            {
                this.DataConsegna = dataConsegna;
            }
            // use default value if no "descrizione1" provided
            if (descrizione1 == null)
            {
                this.Descrizione1 = "";
            }
            else
            {
                this.Descrizione1 = descrizione1;
            }
            // use default value if no "descrizione2" provided
            if (descrizione2 == null)
            {
                this.Descrizione2 = "";
            }
            else
            {
                this.Descrizione2 = descrizione2;
            }
            // use default value if no "via" provided
            if (via == null)
            {
                this.Via = "";
            }
            else
            {
                this.Via = via;
            }
            // use default value if no "cap" provided
            if (cap == null)
            {
                this.Cap = "";
            }
            else
            {
                this.Cap = cap;
            }
            // use default value if no "citta" provided
            if (citta == null)
            {
                this.Citta = "";
            }
            else
            {
                this.Citta = citta;
            }
            // use default value if no "provincia" provided
            if (provincia == null)
            {
                this.Provincia = "";
            }
            else
            {
                this.Provincia = provincia;
            }
            // use default value if no "tvaCodice" provided
            if (tvaCodice == null)
            {
                this.TvaCodice = "";
            }
            else
            {
                this.TvaCodice = tvaCodice;
            }
            // use default value if no "tpaCodice" provided
            if (tpaCodice == null)
            {
                this.TpaCodice = "";
            }
            else
            {
                this.TpaCodice = tpaCodice;
            }
            // use default value if no "tlvCodice" provided
            if (tlvCodice == null)
            {
                this.TlvCodice = "";
            }
            else
            {
                this.TlvCodice = tlvCodice;
            }
            // use default value if no "tsmCodice" provided
            if (tsmCodice == null)
            {
                this.TsmCodice = "";
            }
            else
            {
                this.TsmCodice = tsmCodice;
            }
            // use default value if no "tsmCodiceArt" provided
            if (tsmCodiceArt == null)
            {
                this.TsmCodiceArt = "";
            }
            else
            {
                this.TsmCodiceArt = tsmCodiceArt;
            }
            // use default value if no "tagCodice" provided
            if (tagCodice == null)
            {
                this.TagCodice = "";
            }
            else
            {
                this.TagCodice = tagCodice;
            }
            // use default value if no "codiceContratto" provided
            if (codiceContratto == null)
            {
                this.CodiceContratto = "";
            }
            else
            {
                this.CodiceContratto = codiceContratto;
            }
            // use default value if no "note" provided
            if (note == null)
            {
                this.Note = "";
            }
            else
            {
                this.Note = note;
            }
        }
        
        /// <summary>
        /// Codice del cliente
        /// </summary>
        /// <value>Codice del cliente</value>
        [DataMember(Name="cliCodice", EmitDefaultValue=false)]
        public string CliCodice { get; set; }

        /// <summary>
        /// Codice del magazzino
        /// </summary>
        /// <value>Codice del magazzino</value>
        [DataMember(Name="tmaCodice", EmitDefaultValue=false)]
        public string TmaCodice { get; set; }

        /// <summary>
        /// Codice del tipo documento ordine
        /// </summary>
        /// <value>Codice del tipo documento ordine</value>
        [DataMember(Name="tdoCodice", EmitDefaultValue=false)]
        public string TdoCodice { get; set; }

        /// <summary>
        /// Codice dell&#x27;indirizzo
        /// </summary>
        /// <value>Codice dell&#x27;indirizzo</value>
        [DataMember(Name="indCodice", EmitDefaultValue=false)]
        public string IndCodice { get; set; }

        /// <summary>
        /// Numero del documento
        /// </summary>
        /// <value>Numero del documento</value>
        [DataMember(Name="numeroDocumento", EmitDefaultValue=false)]
        public string NumeroDocumento { get; set; }

        /// <summary>
        /// Data del documento
        /// </summary>
        /// <value>Data del documento</value>
        [DataMember(Name="dataDocumento", EmitDefaultValue=false)]
        public string DataDocumento { get; set; }

        /// <summary>
        /// Data di consegna. \&quot;dd-mm-yyyy\&quot; Deve essere uguale o successiva alla data del documento. Se la data di consegna è precedente alla data del documento, verrà generato un errore. 
        /// </summary>
        /// <value>Data di consegna. \&quot;dd-mm-yyyy\&quot; Deve essere uguale o successiva alla data del documento. Se la data di consegna è precedente alla data del documento, verrà generato un errore. </value>
        [DataMember(Name="dataConsegna", EmitDefaultValue=false)]
        public string DataConsegna { get; set; }

        /// <summary>
        /// Descrizione 1
        /// </summary>
        /// <value>Descrizione 1</value>
        [DataMember(Name="descrizione1", EmitDefaultValue=false)]
        public string Descrizione1 { get; set; }

        /// <summary>
        /// Descrizione 2
        /// </summary>
        /// <value>Descrizione 2</value>
        [DataMember(Name="descrizione2", EmitDefaultValue=false)]
        public string Descrizione2 { get; set; }

        /// <summary>
        /// Via
        /// </summary>
        /// <value>Via</value>
        [DataMember(Name="via", EmitDefaultValue=false)]
        public string Via { get; set; }

        /// <summary>
        /// Cap
        /// </summary>
        /// <value>Cap</value>
        [DataMember(Name="cap", EmitDefaultValue=false)]
        public string Cap { get; set; }

        /// <summary>
        /// Città
        /// </summary>
        /// <value>Città</value>
        [DataMember(Name="citta", EmitDefaultValue=false)]
        public string Citta { get; set; }

        /// <summary>
        /// Provincia
        /// </summary>
        /// <value>Provincia</value>
        [DataMember(Name="provincia", EmitDefaultValue=false)]
        public string Provincia { get; set; }

        /// <summary>
        /// Codice valuta
        /// </summary>
        /// <value>Codice valuta</value>
        [DataMember(Name="tvaCodice", EmitDefaultValue=false)]
        public string TvaCodice { get; set; }

        /// <summary>
        /// Codice del pagamento
        /// </summary>
        /// <value>Codice del pagamento</value>
        [DataMember(Name="tpaCodice", EmitDefaultValue=false)]
        public string TpaCodice { get; set; }

        /// <summary>
        /// Codice del listino
        /// </summary>
        /// <value>Codice del listino</value>
        [DataMember(Name="tlvCodice", EmitDefaultValue=false)]
        public string TlvCodice { get; set; }

        /// <summary>
        /// Codice sconto
        /// </summary>
        /// <value>Codice sconto</value>
        [DataMember(Name="tsmCodice", EmitDefaultValue=false)]
        public string TsmCodice { get; set; }

        /// <summary>
        /// Codice sconto articolo
        /// </summary>
        /// <value>Codice sconto articolo</value>
        [DataMember(Name="tsmCodiceArt", EmitDefaultValue=false)]
        public string TsmCodiceArt { get; set; }

        /// <summary>
        /// Codice dell&#x27;agente
        /// </summary>
        /// <value>Codice dell&#x27;agente</value>
        [DataMember(Name="tagCodice", EmitDefaultValue=false)]
        public string TagCodice { get; set; }

        /// <summary>
        /// Codice del contratto
        /// </summary>
        /// <value>Codice del contratto</value>
        [DataMember(Name="codiceContratto", EmitDefaultValue=false)]
        public string CodiceContratto { get; set; }

        /// <summary>
        /// Note
        /// </summary>
        /// <value>Note</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InserisciTestataBody {\n");
            sb.Append("  CliCodice: ").Append(CliCodice).Append("\n");
            sb.Append("  TmaCodice: ").Append(TmaCodice).Append("\n");
            sb.Append("  TdoCodice: ").Append(TdoCodice).Append("\n");
            sb.Append("  IndCodice: ").Append(IndCodice).Append("\n");
            sb.Append("  NumeroDocumento: ").Append(NumeroDocumento).Append("\n");
            sb.Append("  DataDocumento: ").Append(DataDocumento).Append("\n");
            sb.Append("  DataConsegna: ").Append(DataConsegna).Append("\n");
            sb.Append("  Descrizione1: ").Append(Descrizione1).Append("\n");
            sb.Append("  Descrizione2: ").Append(Descrizione2).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  Citta: ").Append(Citta).Append("\n");
            sb.Append("  Provincia: ").Append(Provincia).Append("\n");
            sb.Append("  TvaCodice: ").Append(TvaCodice).Append("\n");
            sb.Append("  TpaCodice: ").Append(TpaCodice).Append("\n");
            sb.Append("  TlvCodice: ").Append(TlvCodice).Append("\n");
            sb.Append("  TsmCodice: ").Append(TsmCodice).Append("\n");
            sb.Append("  TsmCodiceArt: ").Append(TsmCodiceArt).Append("\n");
            sb.Append("  TagCodice: ").Append(TagCodice).Append("\n");
            sb.Append("  CodiceContratto: ").Append(CodiceContratto).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InserisciTestataBody);
        }

        /// <summary>
        /// Returns true if InserisciTestataBody instances are equal
        /// </summary>
        /// <param name="input">Instance of InserisciTestataBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InserisciTestataBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CliCodice == input.CliCodice ||
                    (this.CliCodice != null &&
                    this.CliCodice.Equals(input.CliCodice))
                ) && 
                (
                    this.TmaCodice == input.TmaCodice ||
                    (this.TmaCodice != null &&
                    this.TmaCodice.Equals(input.TmaCodice))
                ) && 
                (
                    this.TdoCodice == input.TdoCodice ||
                    (this.TdoCodice != null &&
                    this.TdoCodice.Equals(input.TdoCodice))
                ) && 
                (
                    this.IndCodice == input.IndCodice ||
                    (this.IndCodice != null &&
                    this.IndCodice.Equals(input.IndCodice))
                ) && 
                (
                    this.NumeroDocumento == input.NumeroDocumento ||
                    (this.NumeroDocumento != null &&
                    this.NumeroDocumento.Equals(input.NumeroDocumento))
                ) && 
                (
                    this.DataDocumento == input.DataDocumento ||
                    (this.DataDocumento != null &&
                    this.DataDocumento.Equals(input.DataDocumento))
                ) && 
                (
                    this.DataConsegna == input.DataConsegna ||
                    (this.DataConsegna != null &&
                    this.DataConsegna.Equals(input.DataConsegna))
                ) && 
                (
                    this.Descrizione1 == input.Descrizione1 ||
                    (this.Descrizione1 != null &&
                    this.Descrizione1.Equals(input.Descrizione1))
                ) && 
                (
                    this.Descrizione2 == input.Descrizione2 ||
                    (this.Descrizione2 != null &&
                    this.Descrizione2.Equals(input.Descrizione2))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                ) && 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.Citta == input.Citta ||
                    (this.Citta != null &&
                    this.Citta.Equals(input.Citta))
                ) && 
                (
                    this.Provincia == input.Provincia ||
                    (this.Provincia != null &&
                    this.Provincia.Equals(input.Provincia))
                ) && 
                (
                    this.TvaCodice == input.TvaCodice ||
                    (this.TvaCodice != null &&
                    this.TvaCodice.Equals(input.TvaCodice))
                ) && 
                (
                    this.TpaCodice == input.TpaCodice ||
                    (this.TpaCodice != null &&
                    this.TpaCodice.Equals(input.TpaCodice))
                ) && 
                (
                    this.TlvCodice == input.TlvCodice ||
                    (this.TlvCodice != null &&
                    this.TlvCodice.Equals(input.TlvCodice))
                ) && 
                (
                    this.TsmCodice == input.TsmCodice ||
                    (this.TsmCodice != null &&
                    this.TsmCodice.Equals(input.TsmCodice))
                ) && 
                (
                    this.TsmCodiceArt == input.TsmCodiceArt ||
                    (this.TsmCodiceArt != null &&
                    this.TsmCodiceArt.Equals(input.TsmCodiceArt))
                ) && 
                (
                    this.TagCodice == input.TagCodice ||
                    (this.TagCodice != null &&
                    this.TagCodice.Equals(input.TagCodice))
                ) && 
                (
                    this.CodiceContratto == input.CodiceContratto ||
                    (this.CodiceContratto != null &&
                    this.CodiceContratto.Equals(input.CodiceContratto))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CliCodice != null)
                    hashCode = hashCode * 59 + this.CliCodice.GetHashCode();
                if (this.TmaCodice != null)
                    hashCode = hashCode * 59 + this.TmaCodice.GetHashCode();
                if (this.TdoCodice != null)
                    hashCode = hashCode * 59 + this.TdoCodice.GetHashCode();
                if (this.IndCodice != null)
                    hashCode = hashCode * 59 + this.IndCodice.GetHashCode();
                if (this.NumeroDocumento != null)
                    hashCode = hashCode * 59 + this.NumeroDocumento.GetHashCode();
                if (this.DataDocumento != null)
                    hashCode = hashCode * 59 + this.DataDocumento.GetHashCode();
                if (this.DataConsegna != null)
                    hashCode = hashCode * 59 + this.DataConsegna.GetHashCode();
                if (this.Descrizione1 != null)
                    hashCode = hashCode * 59 + this.Descrizione1.GetHashCode();
                if (this.Descrizione2 != null)
                    hashCode = hashCode * 59 + this.Descrizione2.GetHashCode();
                if (this.Via != null)
                    hashCode = hashCode * 59 + this.Via.GetHashCode();
                if (this.Cap != null)
                    hashCode = hashCode * 59 + this.Cap.GetHashCode();
                if (this.Citta != null)
                    hashCode = hashCode * 59 + this.Citta.GetHashCode();
                if (this.Provincia != null)
                    hashCode = hashCode * 59 + this.Provincia.GetHashCode();
                if (this.TvaCodice != null)
                    hashCode = hashCode * 59 + this.TvaCodice.GetHashCode();
                if (this.TpaCodice != null)
                    hashCode = hashCode * 59 + this.TpaCodice.GetHashCode();
                if (this.TlvCodice != null)
                    hashCode = hashCode * 59 + this.TlvCodice.GetHashCode();
                if (this.TsmCodice != null)
                    hashCode = hashCode * 59 + this.TsmCodice.GetHashCode();
                if (this.TsmCodiceArt != null)
                    hashCode = hashCode * 59 + this.TsmCodiceArt.GetHashCode();
                if (this.TagCodice != null)
                    hashCode = hashCode * 59 + this.TagCodice.GetHashCode();
                if (this.CodiceContratto != null)
                    hashCode = hashCode * 59 + this.CodiceContratto.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
