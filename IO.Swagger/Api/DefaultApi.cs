/* 
 * API Inserimento Ordine
 *
 * Documentazione delle API per l'inserimento di un ordine.   **Tutti i parametri che non hanno un `required` affianco sono opzionali.** In più, durante la prova togliere la spunta da \"Send empty value\".  Così, il parametro non viene passato; se non viene tolto, allora il parametro viene passato come stringa vuota.   
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Genera un token di refresh
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ApiAuthRefreshGeneratePost ();

        /// <summary>
        /// Genera un token di refresh
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ApiAuthRefreshGeneratePostWithHttpInfo ();
        /// <summary>
        /// Genera un token di autenticazione
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiAuthTokenPost (string apiKey, string password, string refresh);

        /// <summary>
        /// Genera un token di autenticazione
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiAuthTokenPostWithHttpInfo (string apiKey, string password, string refresh);
        /// <summary>
        /// Inserisci un nuovo ordine completo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 ApiOrdineInserisciPost (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe);

        /// <summary>
        /// Inserisci un nuovo ordine completo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> ApiOrdineInserisciPostWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe);
        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 ApiOrdineInserisciTestataPost (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note);

        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> ApiOrdineInserisciTestataPostWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note);
        /// <summary>
        /// Inserisci una riga dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ApiOrdineRigaInserisciPost (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento);

        /// <summary>
        /// Inserisci una riga dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ApiOrdineRigaInserisciPostWithHttpInfo (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento);
        /// <summary>
        /// Inserisci righe dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 ApiOrdineRigaInserisciRighePost (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe);

        /// <summary>
        /// Inserisci righe dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> ApiOrdineRigaInserisciRighePostWithHttpInfo (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Genera un token di refresh
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ApiAuthRefreshGeneratePostAsync ();

        /// <summary>
        /// Genera un token di refresh
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ApiAuthRefreshGeneratePostAsyncWithHttpInfo ();
        /// <summary>
        /// Genera un token di autenticazione
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiAuthTokenPostAsync (string apiKey, string password, string refresh);

        /// <summary>
        /// Genera un token di autenticazione
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiAuthTokenPostAsyncWithHttpInfo (string apiKey, string password, string refresh);
        /// <summary>
        /// Inserisci un nuovo ordine completo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> ApiOrdineInserisciPostAsync (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe);

        /// <summary>
        /// Inserisci un nuovo ordine completo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> ApiOrdineInserisciPostAsyncWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe);
        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> ApiOrdineInserisciTestataPostAsync (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note);

        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> ApiOrdineInserisciTestataPostAsyncWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note);
        /// <summary>
        /// Inserisci una riga dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ApiOrdineRigaInserisciPostAsync (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento);

        /// <summary>
        /// Inserisci una riga dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiOrdineRigaInserisciPostAsyncWithHttpInfo (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento);
        /// <summary>
        /// Inserisci righe dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> ApiOrdineRigaInserisciRighePostAsync (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe);

        /// <summary>
        /// Inserisci righe dell&#x27;ordine
        /// </summary>
        /// <remarks>
        /// Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> ApiOrdineRigaInserisciRighePostAsyncWithHttpInfo (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Genera un token di refresh Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ApiAuthRefreshGeneratePost ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = ApiAuthRefreshGeneratePostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Genera un token di refresh Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > ApiAuthRefreshGeneratePostWithHttpInfo ()
        {

            var localVarPath = "/api/auth/refresh/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAuthRefreshGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Genera un token di refresh Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ApiAuthRefreshGeneratePostAsync ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ApiAuthRefreshGeneratePostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Genera un token di refresh Questo endpoint consente di generare un nuovo token di refresh.   Il token generato può poi essere utilizzato nella rotta &#x60;/api/auth/token&#x60; nel parametro &#x60;refresh&#x60; al posto dell&#x27;&#x60;apiKey&#x60; e della &#x60;password&#x60;.  **Questa operazione deve essere eseguita una sola volta per utente.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ApiAuthRefreshGeneratePostAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/auth/refresh/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAuthRefreshGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Genera un token di autenticazione Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiAuthTokenPost (string apiKey, string password, string refresh)
        {
             ApiResponse<InlineResponse200> localVarResponse = ApiAuthTokenPostWithHttpInfo(apiKey, password, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Genera un token di autenticazione Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > ApiAuthTokenPostWithHttpInfo (string apiKey, string password, string refresh)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DefaultApi->ApiAuthTokenPost");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->ApiAuthTokenPost");
            // verify the required parameter 'refresh' is set
            if (refresh == null)
                throw new ApiException(400, "Missing required parameter 'refresh' when calling DefaultApi->ApiAuthTokenPost");

            var localVarPath = "/api/auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarFormParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (refresh != null) localVarFormParams.Add("refresh", this.Configuration.ApiClient.ParameterToString(refresh)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAuthTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Genera un token di autenticazione Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiAuthTokenPostAsync (string apiKey, string password, string refresh)
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApiAuthTokenPostAsyncWithHttpInfo(apiKey, password, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Genera un token di autenticazione Questo endpoint consente di generare un token di autenticazione utilizzando: - una apiKey e una password - un refresh token  **Passare come parametro uno dei due metodi e non entrambi.** 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="password"></param>
        /// <param name="refresh"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiAuthTokenPostAsyncWithHttpInfo (string apiKey, string password, string refresh)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DefaultApi->ApiAuthTokenPost");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->ApiAuthTokenPost");
            // verify the required parameter 'refresh' is set
            if (refresh == null)
                throw new ApiException(400, "Missing required parameter 'refresh' when calling DefaultApi->ApiAuthTokenPost");

            var localVarPath = "/api/auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarFormParams.Add("apiKey", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (refresh != null) localVarFormParams.Add("refresh", this.Configuration.ApiClient.ParameterToString(refresh)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAuthTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Inserisci un nuovo ordine completo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 ApiOrdineInserisciPost (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe)
        {
             ApiResponse<InlineResponse2005> localVarResponse = ApiOrdineInserisciPostWithHttpInfo(cliCodice, tmaCodice, tdoCodice, indCodice, numeroDocumento, dataDocumento, dataConsegna, descrizione1, descrizione2, via, cap, citta, provincia, tvaCodice, tpaCodice, tlvCodice, tsmCodice, tagCodice, codiceContratto, note, righe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserisci un nuovo ordine completo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > ApiOrdineInserisciPostWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe)
        {
            // verify the required parameter 'cliCodice' is set
            if (cliCodice == null)
                throw new ApiException(400, "Missing required parameter 'cliCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tmaCodice' is set
            if (tmaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tmaCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tdoCodice' is set
            if (tdoCodice == null)
                throw new ApiException(400, "Missing required parameter 'tdoCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'indCodice' is set
            if (indCodice == null)
                throw new ApiException(400, "Missing required parameter 'indCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'numeroDocumento' is set
            if (numeroDocumento == null)
                throw new ApiException(400, "Missing required parameter 'numeroDocumento' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'dataDocumento' is set
            if (dataDocumento == null)
                throw new ApiException(400, "Missing required parameter 'dataDocumento' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'dataConsegna' is set
            if (dataConsegna == null)
                throw new ApiException(400, "Missing required parameter 'dataConsegna' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'descrizione1' is set
            if (descrizione1 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione1' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'descrizione2' is set
            if (descrizione2 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione2' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'via' is set
            if (via == null)
                throw new ApiException(400, "Missing required parameter 'via' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'cap' is set
            if (cap == null)
                throw new ApiException(400, "Missing required parameter 'cap' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'citta' is set
            if (citta == null)
                throw new ApiException(400, "Missing required parameter 'citta' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'provincia' is set
            if (provincia == null)
                throw new ApiException(400, "Missing required parameter 'provincia' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tvaCodice' is set
            if (tvaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tvaCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tpaCodice' is set
            if (tpaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tpaCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tlvCodice' is set
            if (tlvCodice == null)
                throw new ApiException(400, "Missing required parameter 'tlvCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tsmCodice' is set
            if (tsmCodice == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tagCodice' is set
            if (tagCodice == null)
                throw new ApiException(400, "Missing required parameter 'tagCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'codiceContratto' is set
            if (codiceContratto == null)
                throw new ApiException(400, "Missing required parameter 'codiceContratto' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'righe' is set
            if (righe == null)
                throw new ApiException(400, "Missing required parameter 'righe' when calling DefaultApi->ApiOrdineInserisciPost");

            var localVarPath = "/api/ordine/inserisci";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cliCodice != null) localVarFormParams.Add("cliCodice", this.Configuration.ApiClient.ParameterToString(cliCodice)); // form parameter
            if (tmaCodice != null) localVarFormParams.Add("tmaCodice", this.Configuration.ApiClient.ParameterToString(tmaCodice)); // form parameter
            if (tdoCodice != null) localVarFormParams.Add("tdoCodice", this.Configuration.ApiClient.ParameterToString(tdoCodice)); // form parameter
            if (indCodice != null) localVarFormParams.Add("indCodice", this.Configuration.ApiClient.ParameterToString(indCodice)); // form parameter
            if (numeroDocumento != null) localVarFormParams.Add("numeroDocumento", this.Configuration.ApiClient.ParameterToString(numeroDocumento)); // form parameter
            if (dataDocumento != null) localVarFormParams.Add("dataDocumento", this.Configuration.ApiClient.ParameterToString(dataDocumento)); // form parameter
            if (dataConsegna != null) localVarFormParams.Add("dataConsegna", this.Configuration.ApiClient.ParameterToString(dataConsegna)); // form parameter
            if (descrizione1 != null) localVarFormParams.Add("descrizione1", this.Configuration.ApiClient.ParameterToString(descrizione1)); // form parameter
            if (descrizione2 != null) localVarFormParams.Add("descrizione2", this.Configuration.ApiClient.ParameterToString(descrizione2)); // form parameter
            if (via != null) localVarFormParams.Add("via", this.Configuration.ApiClient.ParameterToString(via)); // form parameter
            if (cap != null) localVarFormParams.Add("cap", this.Configuration.ApiClient.ParameterToString(cap)); // form parameter
            if (citta != null) localVarFormParams.Add("citta", this.Configuration.ApiClient.ParameterToString(citta)); // form parameter
            if (provincia != null) localVarFormParams.Add("provincia", this.Configuration.ApiClient.ParameterToString(provincia)); // form parameter
            if (tvaCodice != null) localVarFormParams.Add("tvaCodice", this.Configuration.ApiClient.ParameterToString(tvaCodice)); // form parameter
            if (tpaCodice != null) localVarFormParams.Add("tpaCodice", this.Configuration.ApiClient.ParameterToString(tpaCodice)); // form parameter
            if (tlvCodice != null) localVarFormParams.Add("tlvCodice", this.Configuration.ApiClient.ParameterToString(tlvCodice)); // form parameter
            if (tsmCodice != null) localVarFormParams.Add("tsmCodice", this.Configuration.ApiClient.ParameterToString(tsmCodice)); // form parameter
            if (tagCodice != null) localVarFormParams.Add("tagCodice", this.Configuration.ApiClient.ParameterToString(tagCodice)); // form parameter
            if (codiceContratto != null) localVarFormParams.Add("codiceContratto", this.Configuration.ApiClient.ParameterToString(codiceContratto)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (righe != null) localVarFormParams.Add("righe", this.Configuration.ApiClient.ParameterToString(righe)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineInserisciPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Inserisci un nuovo ordine completo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> ApiOrdineInserisciPostAsync (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await ApiOrdineInserisciPostAsyncWithHttpInfo(cliCodice, tmaCodice, tdoCodice, indCodice, numeroDocumento, dataDocumento, dataConsegna, descrizione1, descrizione2, via, cap, citta, provincia, tvaCodice, tpaCodice, tlvCodice, tsmCodice, tagCodice, codiceContratto, note, righe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserisci un nuovo ordine completo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine e le relative righe.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <param name="righe"></param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> ApiOrdineInserisciPostAsyncWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tagCodice, string codiceContratto, string note, List<ApiordineinserisciRighe> righe)
        {
            // verify the required parameter 'cliCodice' is set
            if (cliCodice == null)
                throw new ApiException(400, "Missing required parameter 'cliCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tmaCodice' is set
            if (tmaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tmaCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tdoCodice' is set
            if (tdoCodice == null)
                throw new ApiException(400, "Missing required parameter 'tdoCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'indCodice' is set
            if (indCodice == null)
                throw new ApiException(400, "Missing required parameter 'indCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'numeroDocumento' is set
            if (numeroDocumento == null)
                throw new ApiException(400, "Missing required parameter 'numeroDocumento' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'dataDocumento' is set
            if (dataDocumento == null)
                throw new ApiException(400, "Missing required parameter 'dataDocumento' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'dataConsegna' is set
            if (dataConsegna == null)
                throw new ApiException(400, "Missing required parameter 'dataConsegna' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'descrizione1' is set
            if (descrizione1 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione1' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'descrizione2' is set
            if (descrizione2 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione2' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'via' is set
            if (via == null)
                throw new ApiException(400, "Missing required parameter 'via' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'cap' is set
            if (cap == null)
                throw new ApiException(400, "Missing required parameter 'cap' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'citta' is set
            if (citta == null)
                throw new ApiException(400, "Missing required parameter 'citta' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'provincia' is set
            if (provincia == null)
                throw new ApiException(400, "Missing required parameter 'provincia' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tvaCodice' is set
            if (tvaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tvaCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tpaCodice' is set
            if (tpaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tpaCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tlvCodice' is set
            if (tlvCodice == null)
                throw new ApiException(400, "Missing required parameter 'tlvCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tsmCodice' is set
            if (tsmCodice == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'tagCodice' is set
            if (tagCodice == null)
                throw new ApiException(400, "Missing required parameter 'tagCodice' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'codiceContratto' is set
            if (codiceContratto == null)
                throw new ApiException(400, "Missing required parameter 'codiceContratto' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->ApiOrdineInserisciPost");
            // verify the required parameter 'righe' is set
            if (righe == null)
                throw new ApiException(400, "Missing required parameter 'righe' when calling DefaultApi->ApiOrdineInserisciPost");

            var localVarPath = "/api/ordine/inserisci";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cliCodice != null) localVarFormParams.Add("cliCodice", this.Configuration.ApiClient.ParameterToString(cliCodice)); // form parameter
            if (tmaCodice != null) localVarFormParams.Add("tmaCodice", this.Configuration.ApiClient.ParameterToString(tmaCodice)); // form parameter
            if (tdoCodice != null) localVarFormParams.Add("tdoCodice", this.Configuration.ApiClient.ParameterToString(tdoCodice)); // form parameter
            if (indCodice != null) localVarFormParams.Add("indCodice", this.Configuration.ApiClient.ParameterToString(indCodice)); // form parameter
            if (numeroDocumento != null) localVarFormParams.Add("numeroDocumento", this.Configuration.ApiClient.ParameterToString(numeroDocumento)); // form parameter
            if (dataDocumento != null) localVarFormParams.Add("dataDocumento", this.Configuration.ApiClient.ParameterToString(dataDocumento)); // form parameter
            if (dataConsegna != null) localVarFormParams.Add("dataConsegna", this.Configuration.ApiClient.ParameterToString(dataConsegna)); // form parameter
            if (descrizione1 != null) localVarFormParams.Add("descrizione1", this.Configuration.ApiClient.ParameterToString(descrizione1)); // form parameter
            if (descrizione2 != null) localVarFormParams.Add("descrizione2", this.Configuration.ApiClient.ParameterToString(descrizione2)); // form parameter
            if (via != null) localVarFormParams.Add("via", this.Configuration.ApiClient.ParameterToString(via)); // form parameter
            if (cap != null) localVarFormParams.Add("cap", this.Configuration.ApiClient.ParameterToString(cap)); // form parameter
            if (citta != null) localVarFormParams.Add("citta", this.Configuration.ApiClient.ParameterToString(citta)); // form parameter
            if (provincia != null) localVarFormParams.Add("provincia", this.Configuration.ApiClient.ParameterToString(provincia)); // form parameter
            if (tvaCodice != null) localVarFormParams.Add("tvaCodice", this.Configuration.ApiClient.ParameterToString(tvaCodice)); // form parameter
            if (tpaCodice != null) localVarFormParams.Add("tpaCodice", this.Configuration.ApiClient.ParameterToString(tpaCodice)); // form parameter
            if (tlvCodice != null) localVarFormParams.Add("tlvCodice", this.Configuration.ApiClient.ParameterToString(tlvCodice)); // form parameter
            if (tsmCodice != null) localVarFormParams.Add("tsmCodice", this.Configuration.ApiClient.ParameterToString(tsmCodice)); // form parameter
            if (tagCodice != null) localVarFormParams.Add("tagCodice", this.Configuration.ApiClient.ParameterToString(tagCodice)); // form parameter
            if (codiceContratto != null) localVarFormParams.Add("codiceContratto", this.Configuration.ApiClient.ParameterToString(codiceContratto)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (righe != null) localVarFormParams.Add("righe", this.Configuration.ApiClient.ParameterToString(righe)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineInserisciPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 ApiOrdineInserisciTestataPost (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note)
        {
             ApiResponse<InlineResponse2002> localVarResponse = ApiOrdineInserisciTestataPostWithHttpInfo(cliCodice, tmaCodice, tdoCodice, indCodice, numeroDocumento, dataDocumento, dataConsegna, descrizione1, descrizione2, via, cap, citta, provincia, tvaCodice, tpaCodice, tlvCodice, tsmCodice, tsmCodiceArt, tagCodice, codiceContratto, note);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > ApiOrdineInserisciTestataPostWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note)
        {
            // verify the required parameter 'cliCodice' is set
            if (cliCodice == null)
                throw new ApiException(400, "Missing required parameter 'cliCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tmaCodice' is set
            if (tmaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tmaCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tdoCodice' is set
            if (tdoCodice == null)
                throw new ApiException(400, "Missing required parameter 'tdoCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'indCodice' is set
            if (indCodice == null)
                throw new ApiException(400, "Missing required parameter 'indCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'numeroDocumento' is set
            if (numeroDocumento == null)
                throw new ApiException(400, "Missing required parameter 'numeroDocumento' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'dataDocumento' is set
            if (dataDocumento == null)
                throw new ApiException(400, "Missing required parameter 'dataDocumento' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'dataConsegna' is set
            if (dataConsegna == null)
                throw new ApiException(400, "Missing required parameter 'dataConsegna' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'descrizione1' is set
            if (descrizione1 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione1' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'descrizione2' is set
            if (descrizione2 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione2' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'via' is set
            if (via == null)
                throw new ApiException(400, "Missing required parameter 'via' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'cap' is set
            if (cap == null)
                throw new ApiException(400, "Missing required parameter 'cap' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'citta' is set
            if (citta == null)
                throw new ApiException(400, "Missing required parameter 'citta' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'provincia' is set
            if (provincia == null)
                throw new ApiException(400, "Missing required parameter 'provincia' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tvaCodice' is set
            if (tvaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tvaCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tpaCodice' is set
            if (tpaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tpaCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tlvCodice' is set
            if (tlvCodice == null)
                throw new ApiException(400, "Missing required parameter 'tlvCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tsmCodice' is set
            if (tsmCodice == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tsmCodiceArt' is set
            if (tsmCodiceArt == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodiceArt' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tagCodice' is set
            if (tagCodice == null)
                throw new ApiException(400, "Missing required parameter 'tagCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'codiceContratto' is set
            if (codiceContratto == null)
                throw new ApiException(400, "Missing required parameter 'codiceContratto' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->ApiOrdineInserisciTestataPost");

            var localVarPath = "/api/ordine/inserisci/testata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cliCodice != null) localVarFormParams.Add("cliCodice", this.Configuration.ApiClient.ParameterToString(cliCodice)); // form parameter
            if (tmaCodice != null) localVarFormParams.Add("tmaCodice", this.Configuration.ApiClient.ParameterToString(tmaCodice)); // form parameter
            if (tdoCodice != null) localVarFormParams.Add("tdoCodice", this.Configuration.ApiClient.ParameterToString(tdoCodice)); // form parameter
            if (indCodice != null) localVarFormParams.Add("indCodice", this.Configuration.ApiClient.ParameterToString(indCodice)); // form parameter
            if (numeroDocumento != null) localVarFormParams.Add("numeroDocumento", this.Configuration.ApiClient.ParameterToString(numeroDocumento)); // form parameter
            if (dataDocumento != null) localVarFormParams.Add("dataDocumento", this.Configuration.ApiClient.ParameterToString(dataDocumento)); // form parameter
            if (dataConsegna != null) localVarFormParams.Add("dataConsegna", this.Configuration.ApiClient.ParameterToString(dataConsegna)); // form parameter
            if (descrizione1 != null) localVarFormParams.Add("descrizione1", this.Configuration.ApiClient.ParameterToString(descrizione1)); // form parameter
            if (descrizione2 != null) localVarFormParams.Add("descrizione2", this.Configuration.ApiClient.ParameterToString(descrizione2)); // form parameter
            if (via != null) localVarFormParams.Add("via", this.Configuration.ApiClient.ParameterToString(via)); // form parameter
            if (cap != null) localVarFormParams.Add("cap", this.Configuration.ApiClient.ParameterToString(cap)); // form parameter
            if (citta != null) localVarFormParams.Add("citta", this.Configuration.ApiClient.ParameterToString(citta)); // form parameter
            if (provincia != null) localVarFormParams.Add("provincia", this.Configuration.ApiClient.ParameterToString(provincia)); // form parameter
            if (tvaCodice != null) localVarFormParams.Add("tvaCodice", this.Configuration.ApiClient.ParameterToString(tvaCodice)); // form parameter
            if (tpaCodice != null) localVarFormParams.Add("tpaCodice", this.Configuration.ApiClient.ParameterToString(tpaCodice)); // form parameter
            if (tlvCodice != null) localVarFormParams.Add("tlvCodice", this.Configuration.ApiClient.ParameterToString(tlvCodice)); // form parameter
            if (tsmCodice != null) localVarFormParams.Add("tsmCodice", this.Configuration.ApiClient.ParameterToString(tsmCodice)); // form parameter
            if (tsmCodiceArt != null) localVarFormParams.Add("tsmCodiceArt", this.Configuration.ApiClient.ParameterToString(tsmCodiceArt)); // form parameter
            if (tagCodice != null) localVarFormParams.Add("tagCodice", this.Configuration.ApiClient.ParameterToString(tagCodice)); // form parameter
            if (codiceContratto != null) localVarFormParams.Add("codiceContratto", this.Configuration.ApiClient.ParameterToString(codiceContratto)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineInserisciTestataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> ApiOrdineInserisciTestataPostAsync (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await ApiOrdineInserisciTestataPostAsyncWithHttpInfo(cliCodice, tmaCodice, tdoCodice, indCodice, numeroDocumento, dataDocumento, dataConsegna, descrizione1, descrizione2, via, cap, citta, provincia, tvaCodice, tpaCodice, tlvCodice, tsmCodice, tsmCodiceArt, tagCodice, codiceContratto, note);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserisci una nuova testata dell&#x27;ordine. Inserire una descrizione vuota per prenere la descrizione dell&#x27;articolo Questo endpoint consente di inserire una nuova testata dell&#x27;ordine.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cliCodice"></param>
        /// <param name="tmaCodice"></param>
        /// <param name="tdoCodice"></param>
        /// <param name="indCodice"></param>
        /// <param name="numeroDocumento"></param>
        /// <param name="dataDocumento"></param>
        /// <param name="dataConsegna"></param>
        /// <param name="descrizione1"></param>
        /// <param name="descrizione2"></param>
        /// <param name="via"></param>
        /// <param name="cap"></param>
        /// <param name="citta"></param>
        /// <param name="provincia"></param>
        /// <param name="tvaCodice"></param>
        /// <param name="tpaCodice"></param>
        /// <param name="tlvCodice"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tagCodice"></param>
        /// <param name="codiceContratto"></param>
        /// <param name="note"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> ApiOrdineInserisciTestataPostAsyncWithHttpInfo (string cliCodice, string tmaCodice, string tdoCodice, string indCodice, string numeroDocumento, string dataDocumento, string dataConsegna, string descrizione1, string descrizione2, string via, string cap, string citta, string provincia, string tvaCodice, string tpaCodice, string tlvCodice, string tsmCodice, string tsmCodiceArt, string tagCodice, string codiceContratto, string note)
        {
            // verify the required parameter 'cliCodice' is set
            if (cliCodice == null)
                throw new ApiException(400, "Missing required parameter 'cliCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tmaCodice' is set
            if (tmaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tmaCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tdoCodice' is set
            if (tdoCodice == null)
                throw new ApiException(400, "Missing required parameter 'tdoCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'indCodice' is set
            if (indCodice == null)
                throw new ApiException(400, "Missing required parameter 'indCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'numeroDocumento' is set
            if (numeroDocumento == null)
                throw new ApiException(400, "Missing required parameter 'numeroDocumento' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'dataDocumento' is set
            if (dataDocumento == null)
                throw new ApiException(400, "Missing required parameter 'dataDocumento' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'dataConsegna' is set
            if (dataConsegna == null)
                throw new ApiException(400, "Missing required parameter 'dataConsegna' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'descrizione1' is set
            if (descrizione1 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione1' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'descrizione2' is set
            if (descrizione2 == null)
                throw new ApiException(400, "Missing required parameter 'descrizione2' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'via' is set
            if (via == null)
                throw new ApiException(400, "Missing required parameter 'via' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'cap' is set
            if (cap == null)
                throw new ApiException(400, "Missing required parameter 'cap' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'citta' is set
            if (citta == null)
                throw new ApiException(400, "Missing required parameter 'citta' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'provincia' is set
            if (provincia == null)
                throw new ApiException(400, "Missing required parameter 'provincia' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tvaCodice' is set
            if (tvaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tvaCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tpaCodice' is set
            if (tpaCodice == null)
                throw new ApiException(400, "Missing required parameter 'tpaCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tlvCodice' is set
            if (tlvCodice == null)
                throw new ApiException(400, "Missing required parameter 'tlvCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tsmCodice' is set
            if (tsmCodice == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tsmCodiceArt' is set
            if (tsmCodiceArt == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodiceArt' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'tagCodice' is set
            if (tagCodice == null)
                throw new ApiException(400, "Missing required parameter 'tagCodice' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'codiceContratto' is set
            if (codiceContratto == null)
                throw new ApiException(400, "Missing required parameter 'codiceContratto' when calling DefaultApi->ApiOrdineInserisciTestataPost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->ApiOrdineInserisciTestataPost");

            var localVarPath = "/api/ordine/inserisci/testata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cliCodice != null) localVarFormParams.Add("cliCodice", this.Configuration.ApiClient.ParameterToString(cliCodice)); // form parameter
            if (tmaCodice != null) localVarFormParams.Add("tmaCodice", this.Configuration.ApiClient.ParameterToString(tmaCodice)); // form parameter
            if (tdoCodice != null) localVarFormParams.Add("tdoCodice", this.Configuration.ApiClient.ParameterToString(tdoCodice)); // form parameter
            if (indCodice != null) localVarFormParams.Add("indCodice", this.Configuration.ApiClient.ParameterToString(indCodice)); // form parameter
            if (numeroDocumento != null) localVarFormParams.Add("numeroDocumento", this.Configuration.ApiClient.ParameterToString(numeroDocumento)); // form parameter
            if (dataDocumento != null) localVarFormParams.Add("dataDocumento", this.Configuration.ApiClient.ParameterToString(dataDocumento)); // form parameter
            if (dataConsegna != null) localVarFormParams.Add("dataConsegna", this.Configuration.ApiClient.ParameterToString(dataConsegna)); // form parameter
            if (descrizione1 != null) localVarFormParams.Add("descrizione1", this.Configuration.ApiClient.ParameterToString(descrizione1)); // form parameter
            if (descrizione2 != null) localVarFormParams.Add("descrizione2", this.Configuration.ApiClient.ParameterToString(descrizione2)); // form parameter
            if (via != null) localVarFormParams.Add("via", this.Configuration.ApiClient.ParameterToString(via)); // form parameter
            if (cap != null) localVarFormParams.Add("cap", this.Configuration.ApiClient.ParameterToString(cap)); // form parameter
            if (citta != null) localVarFormParams.Add("citta", this.Configuration.ApiClient.ParameterToString(citta)); // form parameter
            if (provincia != null) localVarFormParams.Add("provincia", this.Configuration.ApiClient.ParameterToString(provincia)); // form parameter
            if (tvaCodice != null) localVarFormParams.Add("tvaCodice", this.Configuration.ApiClient.ParameterToString(tvaCodice)); // form parameter
            if (tpaCodice != null) localVarFormParams.Add("tpaCodice", this.Configuration.ApiClient.ParameterToString(tpaCodice)); // form parameter
            if (tlvCodice != null) localVarFormParams.Add("tlvCodice", this.Configuration.ApiClient.ParameterToString(tlvCodice)); // form parameter
            if (tsmCodice != null) localVarFormParams.Add("tsmCodice", this.Configuration.ApiClient.ParameterToString(tsmCodice)); // form parameter
            if (tsmCodiceArt != null) localVarFormParams.Add("tsmCodiceArt", this.Configuration.ApiClient.ParameterToString(tsmCodiceArt)); // form parameter
            if (tagCodice != null) localVarFormParams.Add("tagCodice", this.Configuration.ApiClient.ParameterToString(tagCodice)); // form parameter
            if (codiceContratto != null) localVarFormParams.Add("codiceContratto", this.Configuration.ApiClient.ParameterToString(codiceContratto)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineInserisciTestataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Inserisci una riga dell&#x27;ordine Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ApiOrdineRigaInserisciPost (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento)
        {
             ApiResponse<InlineResponse2003> localVarResponse = ApiOrdineRigaInserisciPostWithHttpInfo(idOvt, descrizione, artCodice, quantita, tsmCodice, tsmCodiceArt, tivCodice, prezzo, note, tipoMovimento);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserisci una riga dell&#x27;ordine Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ApiOrdineRigaInserisciPostWithHttpInfo (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento)
        {
            // verify the required parameter 'idOvt' is set
            if (idOvt == null)
                throw new ApiException(400, "Missing required parameter 'idOvt' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'descrizione' is set
            if (descrizione == null)
                throw new ApiException(400, "Missing required parameter 'descrizione' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'artCodice' is set
            if (artCodice == null)
                throw new ApiException(400, "Missing required parameter 'artCodice' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'quantita' is set
            if (quantita == null)
                throw new ApiException(400, "Missing required parameter 'quantita' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tsmCodice' is set
            if (tsmCodice == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodice' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tsmCodiceArt' is set
            if (tsmCodiceArt == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodiceArt' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tivCodice' is set
            if (tivCodice == null)
                throw new ApiException(400, "Missing required parameter 'tivCodice' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'prezzo' is set
            if (prezzo == null)
                throw new ApiException(400, "Missing required parameter 'prezzo' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tipoMovimento' is set
            if (tipoMovimento == null)
                throw new ApiException(400, "Missing required parameter 'tipoMovimento' when calling DefaultApi->ApiOrdineRigaInserisciPost");

            var localVarPath = "/api/ordine/riga/inserisci";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOvt != null) localVarFormParams.Add("idOvt", this.Configuration.ApiClient.ParameterToString(idOvt)); // form parameter
            if (descrizione != null) localVarFormParams.Add("descrizione", this.Configuration.ApiClient.ParameterToString(descrizione)); // form parameter
            if (artCodice != null) localVarFormParams.Add("artCodice", this.Configuration.ApiClient.ParameterToString(artCodice)); // form parameter
            if (quantita != null) localVarFormParams.Add("quantita", this.Configuration.ApiClient.ParameterToString(quantita)); // form parameter
            if (tsmCodice != null) localVarFormParams.Add("tsmCodice", this.Configuration.ApiClient.ParameterToString(tsmCodice)); // form parameter
            if (tsmCodiceArt != null) localVarFormParams.Add("tsmCodiceArt", this.Configuration.ApiClient.ParameterToString(tsmCodiceArt)); // form parameter
            if (tivCodice != null) localVarFormParams.Add("tivCodice", this.Configuration.ApiClient.ParameterToString(tivCodice)); // form parameter
            if (prezzo != null) localVarFormParams.Add("prezzo", this.Configuration.ApiClient.ParameterToString(prezzo)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (tipoMovimento != null) localVarFormParams.Add("tipoMovimento", this.Configuration.ApiClient.ParameterToString(tipoMovimento)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineRigaInserisciPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Inserisci una riga dell&#x27;ordine Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ApiOrdineRigaInserisciPostAsync (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ApiOrdineRigaInserisciPostAsyncWithHttpInfo(idOvt, descrizione, artCodice, quantita, tsmCodice, tsmCodiceArt, tivCodice, prezzo, note, tipoMovimento);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserisci una riga dell&#x27;ordine Questo endpoint consente di inserire una nuova riga dell&#x27;ordine.  Se non viene fornita una descrizione per la riga dell&#x27;ordine, il sistema utilizzerà la descrizione dell&#x27;articolo associato. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="descrizione"></param>
        /// <param name="artCodice"></param>
        /// <param name="quantita"></param>
        /// <param name="tsmCodice"></param>
        /// <param name="tsmCodiceArt"></param>
        /// <param name="tivCodice"></param>
        /// <param name="prezzo"></param>
        /// <param name="note"></param>
        /// <param name="tipoMovimento"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiOrdineRigaInserisciPostAsyncWithHttpInfo (int? idOvt, string descrizione, string artCodice, int? quantita, string tsmCodice, string tsmCodiceArt, string tivCodice, float? prezzo, string note, string tipoMovimento)
        {
            // verify the required parameter 'idOvt' is set
            if (idOvt == null)
                throw new ApiException(400, "Missing required parameter 'idOvt' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'descrizione' is set
            if (descrizione == null)
                throw new ApiException(400, "Missing required parameter 'descrizione' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'artCodice' is set
            if (artCodice == null)
                throw new ApiException(400, "Missing required parameter 'artCodice' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'quantita' is set
            if (quantita == null)
                throw new ApiException(400, "Missing required parameter 'quantita' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tsmCodice' is set
            if (tsmCodice == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodice' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tsmCodiceArt' is set
            if (tsmCodiceArt == null)
                throw new ApiException(400, "Missing required parameter 'tsmCodiceArt' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tivCodice' is set
            if (tivCodice == null)
                throw new ApiException(400, "Missing required parameter 'tivCodice' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'prezzo' is set
            if (prezzo == null)
                throw new ApiException(400, "Missing required parameter 'prezzo' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->ApiOrdineRigaInserisciPost");
            // verify the required parameter 'tipoMovimento' is set
            if (tipoMovimento == null)
                throw new ApiException(400, "Missing required parameter 'tipoMovimento' when calling DefaultApi->ApiOrdineRigaInserisciPost");

            var localVarPath = "/api/ordine/riga/inserisci";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOvt != null) localVarFormParams.Add("idOvt", this.Configuration.ApiClient.ParameterToString(idOvt)); // form parameter
            if (descrizione != null) localVarFormParams.Add("descrizione", this.Configuration.ApiClient.ParameterToString(descrizione)); // form parameter
            if (artCodice != null) localVarFormParams.Add("artCodice", this.Configuration.ApiClient.ParameterToString(artCodice)); // form parameter
            if (quantita != null) localVarFormParams.Add("quantita", this.Configuration.ApiClient.ParameterToString(quantita)); // form parameter
            if (tsmCodice != null) localVarFormParams.Add("tsmCodice", this.Configuration.ApiClient.ParameterToString(tsmCodice)); // form parameter
            if (tsmCodiceArt != null) localVarFormParams.Add("tsmCodiceArt", this.Configuration.ApiClient.ParameterToString(tsmCodiceArt)); // form parameter
            if (tivCodice != null) localVarFormParams.Add("tivCodice", this.Configuration.ApiClient.ParameterToString(tivCodice)); // form parameter
            if (prezzo != null) localVarFormParams.Add("prezzo", this.Configuration.ApiClient.ParameterToString(prezzo)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (tipoMovimento != null) localVarFormParams.Add("tipoMovimento", this.Configuration.ApiClient.ParameterToString(tipoMovimento)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineRigaInserisciPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Inserisci righe dell&#x27;ordine Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 ApiOrdineRigaInserisciRighePost (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe)
        {
             ApiResponse<InlineResponse2004> localVarResponse = ApiOrdineRigaInserisciRighePostWithHttpInfo(idOvt, righe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserisci righe dell&#x27;ordine Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > ApiOrdineRigaInserisciRighePostWithHttpInfo (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe)
        {
            // verify the required parameter 'idOvt' is set
            if (idOvt == null)
                throw new ApiException(400, "Missing required parameter 'idOvt' when calling DefaultApi->ApiOrdineRigaInserisciRighePost");
            // verify the required parameter 'righe' is set
            if (righe == null)
                throw new ApiException(400, "Missing required parameter 'righe' when calling DefaultApi->ApiOrdineRigaInserisciRighePost");

            var localVarPath = "/api/ordine/riga/inserisci/righe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOvt != null) localVarFormParams.Add("idOvt", this.Configuration.ApiClient.ParameterToString(idOvt)); // form parameter
            if (righe != null) localVarFormParams.Add("righe", this.Configuration.ApiClient.ParameterToString(righe)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineRigaInserisciRighePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Inserisci righe dell&#x27;ordine Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> ApiOrdineRigaInserisciRighePostAsync (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await ApiOrdineRigaInserisciRighePostAsyncWithHttpInfo(idOvt, righe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserisci righe dell&#x27;ordine Questo endpoint consente di inserire le righe di un ordine esistente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOvt"></param>
        /// <param name="righe"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> ApiOrdineRigaInserisciRighePostAsyncWithHttpInfo (int? idOvt, List<ApiordinerigainseriscirigheRighe> righe)
        {
            // verify the required parameter 'idOvt' is set
            if (idOvt == null)
                throw new ApiException(400, "Missing required parameter 'idOvt' when calling DefaultApi->ApiOrdineRigaInserisciRighePost");
            // verify the required parameter 'righe' is set
            if (righe == null)
                throw new ApiException(400, "Missing required parameter 'righe' when calling DefaultApi->ApiOrdineRigaInserisciRighePost");

            var localVarPath = "/api/ordine/riga/inserisci/righe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOvt != null) localVarFormParams.Add("idOvt", this.Configuration.ApiClient.ParameterToString(idOvt)); // form parameter
            if (righe != null) localVarFormParams.Add("righe", this.Configuration.ApiClient.ParameterToString(righe)); // form parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN")))
            {
                localVarHeaderParams["X-AUTH-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-AUTH-TOKEN");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrdineRigaInserisciRighePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

    }
}
